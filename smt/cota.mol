// common
array Byte32 [byte; 32];
array Uint16 [byte; 2];
array Uint32 [byte; 4];
array Byte6 [byte; 6];
array Byte9 [byte; 9];
array Byte20 [byte; 20];
array Byte24 [byte; 24];
vector Bytes <byte>;

array CotaId [byte; 20];
array Characteristic [byte; 20];
array OutPointSlice [byte; 24];

vector Uint32Vec <Uint32>;
vector Byte32Vec <Byte32>;

vector LockScriptVec <Bytes>;
vector ExtensionVec <Byte32>;

struct CotaNFTId {
  smtType: Uint16,
  cotaId: CotaId,
  index: Uint32,
}

struct CotaNFTInfo {
  configure: byte,
  state: byte,
  characteristic: Characteristic,
}

table MerkleProof {
  indices: Uint32Vec,
  lemmas: Byte32Vec,
}

table TransactionProof {
  witnesses_root: Byte32,
  proof: MerkleProof,
}

vector HoldCotaNFTKeyVec <CotaNFTId>;

vector HoldCotaNFTValueVec <CotaNFTInfo>;

// registry
struct Registry {
  lockHash: Byte32,
  state: Byte32,
}

vector RegistryVec <Registry>;

table CotaNFTRegistryEntries {
  registries: RegistryVec,
  proof: Bytes,
}

// define
struct DefineCotaNFTId {
  smtType: Uint16,
  cotaId: CotaId,
}

vector DefineCotaNFTKeyVec <DefineCotaNFTId>;

struct DefineCotaNFTValue {
  total: Uint32,
  issued: Uint32,
  configure: byte,
}

vector DefineCotaNFTValueVec <DefineCotaNFTValue>;

table DefineCotaNFTEntries {
  defineKeys: DefineCotaNFTKeyVec,
  defineValues: DefineCotaNFTValueVec,
  proof: Bytes,
  action: Bytes,
}

// mint
table MintCotaNFTEntries {
  defineKeys: DefineCotaNFTKeyVec,
  defineOldValues: DefineCotaNFTValueVec,
  defineNewValues: DefineCotaNFTValueVec,
  withdrawalKeys: WithdrawalCotaNFTKeyVec,
  withdrawalValues: WithdrawalCotaNFTValueVec,
  proof: Bytes,
  action: Bytes,
}

// transfer
vector WithdrawalCotaNFTKeyVec <CotaNFTId>;

table WithdrawalCotaNFTValue {
  nftInfo: CotaNFTInfo,
  to_lock: Bytes,
  outPoint: OutPointSlice,
}

vector WithdrawalCotaNFTValueVec <WithdrawalCotaNFTValue>;

table WithdrawalCotaNFTEntries {
  holdKeys: HoldCotaNFTKeyVec,
  holdValues: HoldCotaNFTValueVec,
  withdrawalKeys: WithdrawalCotaNFTKeyVec,
  withdrawalValues: WithdrawalCotaNFTValueVec,
  proof: Bytes,
  action: Bytes,
}

struct ClaimCotaNFTKey {
  nftId: CotaNFTId,
  outPoint: OutPointSlice,
}

vector ClaimCotaNFTKeyVec <ClaimCotaNFTKey>;

vector ClaimCotaNFTValueVec <Byte32>;

struct ClaimCotaNFTInfo {
  version: byte,
  nft_info: CotaNFTInfo,
}
vector ClaimCotaNFTInfoVec <ClaimCotaNFTInfo>;

table ClaimCotaNFTEntries {
  holdKeys: HoldCotaNFTKeyVec,
  holdValues: HoldCotaNFTValueVec,
  claimKeys: ClaimCotaNFTKeyVec,
  claimValues: ClaimCotaNFTValueVec,
  proof: Bytes,
  withdrawalProof: Bytes,
  action: Bytes,
}

table TransferCotaNFTEntries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_values: ClaimCotaNFTValueVec,
  withdrawal_keys: WithdrawalCotaNFTKeyVec,
  withdrawal_values: WithdrawalCotaNFTValueVec,
  proof: Bytes,
  withdrawal_proof: Bytes,
  action: Bytes,
}

table ClaimUpdateCotaNFTEntries {
  hold_keys: HoldCotaNFTKeyVec,
  hold_values: HoldCotaNFTValueVec,
  claim_keys: ClaimCotaNFTKeyVec,
  claim_infos: ClaimCotaNFTInfoVec,
  proof: Bytes,
  withdrawal_proof: Bytes,
  action: Bytes,
}

table TransferUpdateCotaNFTEntries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_infos: ClaimCotaNFTInfoVec,
  withdrawal_keys: WithdrawalCotaNFTKeyVec,
  withdrawal_values: WithdrawalCotaNFTValueVec,
  proof: Bytes,
  withdrawal_proof: Bytes,
  action: Bytes,
}

// update
table UpdateCotaNFTEntries {
  holdKeys: HoldCotaNFTKeyVec,
  holdOldValues: HoldCotaNFTValueVec,
  holdNewValues: HoldCotaNFTValueVec,
  proof: Bytes,
  action: Bytes,
}

// V1
struct WithdrawalCotaNFTKeyV1 {
  nft_id: CotaNFTId,
  out_point: OutPointSlice,
}
vector WithdrawalCotaNFTKeyV1Vec <WithdrawalCotaNFTKeyV1>;

table WithdrawalCotaNFTValueV1 {
  nft_info: CotaNFTInfo,
  to_lock: Bytes,
}
vector WithdrawalCotaNFTValueV1Vec <WithdrawalCotaNFTValueV1>;

table MintCotaNFTV1Entries {
  define_keys: DefineCotaNFTKeyVec,
  define_old_values: DefineCotaNFTValueVec,
  define_new_values: DefineCotaNFTValueVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  action: Bytes,
}

table WithdrawalCotaNFTV1Entries {
  hold_keys: HoldCotaNFTKeyVec,
  hold_values: HoldCotaNFTValueVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  action: Bytes,
}

table TransferCotaNFTV1Entries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_values: ClaimCotaNFTValueVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  withdrawal_proof: Bytes,
  action: Bytes,
}

table TransferUpdateCotaNFTV1Entries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_infos: ClaimCotaNFTInfoVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  withdrawal_proof: Bytes,
  action: Bytes,
}


// V2
// The leaf_keys/leaf_values/raw_tx/output_index/tx_proof are used to verify withdraw smt proof
table ClaimCotaNFTV2Entries {
  hold_keys: HoldCotaNFTKeyVec,
  hold_values: HoldCotaNFTValueVec,
  claim_keys: ClaimCotaNFTKeyVec,
  claim_values: ClaimCotaNFTValueVec,
  proof: Bytes,
  action: Bytes,

  withdrawal_proof: Bytes,
  leaf_keys: Byte32Vec,
  leaf_values: Byte32Vec,
  raw_tx: Bytes,
  output_index: Uint32,
  tx_proof: TransactionProof,
}

table TransferCotaNFTV2Entries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_values: ClaimCotaNFTValueVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  action: Bytes,

  withdrawal_proof: Bytes,
  leaf_keys: Byte32Vec,
  leaf_values: Byte32Vec,
  raw_tx: Bytes,
  output_index: Uint32,
  tx_proof: TransactionProof,
}

table ClaimUpdateCotaNFTV2Entries {
  hold_keys: HoldCotaNFTKeyVec,
  hold_values: HoldCotaNFTValueVec,
  claim_keys: ClaimCotaNFTKeyVec,
  claim_infos: ClaimCotaNFTInfoVec,
  proof: Bytes,
  action: Bytes,

  withdrawal_proof: Bytes,
  leaf_keys: Byte32Vec,
  leaf_values: Byte32Vec,
  raw_tx: Bytes,
  output_index: Uint32,
  tx_proof: TransactionProof,
}

table TransferUpdateCotaNFTV2Entries {
  claim_keys: ClaimCotaNFTKeyVec,
  claim_infos: ClaimCotaNFTInfoVec,
  withdrawal_keys: WithdrawalCotaNFTKeyV1Vec,
  withdrawal_values: WithdrawalCotaNFTValueV1Vec,
  proof: Bytes,
  action: Bytes,

  withdrawal_proof: Bytes,
  leaf_keys: Byte32Vec,
  leaf_values: Byte32Vec,
  raw_tx: Bytes,
  output_index: Uint32,
  tx_proof: TransactionProof,
}

// Extension
table ExtensionLeaves {
  keys: ExtensionVec,
  values: ExtensionVec,
  old_values: ExtensionVec,
  proof: Bytes,
}

table ExtensionEntries {
  leaves: ExtensionLeaves,
  sub_type: Byte6,
  raw_data: Bytes,
}


// Subkey
struct SubKey {
  smt_type: Uint16, 
  sub_type: Byte6,  
  ext_data: Uint32, 
  reserved: Byte20,
}
struct SubValue {
  alg_index: Uint16,   
  pubkey_hash: Byte20,
  reserved: Byte9,
  padding: byte,     
}
vector SubKeyVec <SubKey>;
vector SubValueVec<SubValue>;
table SubKeyEntries {
  keys: SubKeyVec,
  values: SubValueVec,
}


// Social recovery 
struct SocialKey {
  smt_type: Uint16,  
  sub_type: Byte6,   
  reserved: Byte24,
}
table SocialValue {
  recovery_mode: byte,   
  must: byte,
  total: byte,
  signers: LockScriptVec,
}
table SocialEntry {
  key: SocialKey,
  value: SocialValue,
}


table FriendPubkey {
  unlock_mode: byte,         
  alg_index: Uint16,    
  pubkey: Bytes,      
	signature: Bytes,   

  // only for subkey
  ext_data: Uint32,   
  subkey_proof: Bytes,
}
vector FriendPubkeyVec <FriendPubkey>;
table SocialUnlockEntries {
  social_value: SocialValue, 
  social_proof: Bytes,     
  social_friends: FriendPubkeyVec,
}
